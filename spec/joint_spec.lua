require "busted.runner"
local Angle = require("angle")
local CylindricalJoint = require("joint.cylindrical")
local Joint = require("joint")
local Object = require("object")
local PrismaticJoint = require("joint.prismatic")
local RevoluteJoint = require("joint.revolute")
local RotationLimit = require("limit.rotation")
local TranslationLimit = require("limit.translation")

describe("Joint.cylindrical", function()
  it("creates a cylindrical joint", function()
    local rotation_limit = RotationLimit.new(Angle.zero(), Angle.zero())
    local translation_limit = TranslationLimit.new(0, 0)
    local joint = Joint.cylindrical(rotation_limit, translation_limit)
    Object.assert_type(joint, Joint)
    Object.assert_type(joint._joint, CylindricalJoint)
  end)
end)

describe("Joint.prismatic", function()
  it("creates a prismatic joint", function()
    local translation_limit = TranslationLimit.new(0, 0)
    local joint = Joint.prismatic(translation_limit)
    Object.assert_type(joint, Joint)
    Object.assert_type(joint._joint, PrismaticJoint)
  end)
end)

describe("Joint.revolute", function()
  it("creates a revolute joint", function()
    local rotation_limit = RotationLimit.new(Angle.zero(), Angle.zero())
    local joint = Joint.revolute(rotation_limit)
    Object.assert_type(joint, Joint)
    Object.assert_type(joint._joint, RevoluteJoint)
  end)
end)

describe("Joint.coerce_type", function()
  local inner

  describe("when passed a Joint", function()
    before_each(function()
      local rotation_limit = RotationLimit.new(Angle.zero(), Angle.zero())
      inner = Joint.revolute(rotation_limit)
    end)

    it("returns the joint", function()
      assert.are.equal(Joint.coerce_type(inner), inner)
    end)
  end)
end)

describe("Joint.dof", function()
  local joint

  describe("when passed a cylindrical joint", function()
    before_each(function()
      local rotation_limit = RotationLimit.new(Angle.zero(), Angle.zero())
      local translation_limit = TranslationLimit.new(0, 0)
      joint = Joint.cylindrical(rotation_limit, translation_limit)
    end)

    it("is 2", function()
      assert.are.equal(joint:dof(), 2)
    end)
  end)

  describe("when passed a prismatic joint", function()
    before_each(function()
      local translation_limit = TranslationLimit.new(0, 0)
      joint = Joint.prismatic(translation_limit)
    end)

    it("is 1", function()
      assert.are.equal(joint:dof(), 1)
    end)
  end)

  describe("when passed a revolute joint", function()
    before_each(function()
      local rotation_limit = RotationLimit.new(Angle.zero(), Angle.zero())
      joint = Joint.revolute(rotation_limit)
    end)

    it("is 1", function()
      assert.are.equal(joint:dof(), 1)
    end)
  end)
end)
