require "busted.runner"
local Angle = require("angle")
local Chain = require("chain")
local Joint = require("joint")
local Link = require "link"
local Object = require("object")
local Vec3 = require("vec3")

describe("Chain.new", function()
  local chain

  before_each(function()
    chain = Chain.new()
  end)

  it("creates an instance", function()
    Object.assert_type(chain, Chain)
  end)
end)

describe("Chain:add", function()
  local chain
  before_each(function()
    chain = Chain.new()
  end)

  before_each(function()
    assert.are.equal(chain:length(), 0)
  end)

  it("can add joints and links to the chain", function()
    local joint = Joint.hinge(Vec3.new(0, 0, 1), Vec3.new(1, 0, 0))
    local link = Link.new(13)
    chain:add(joint, link)

    assert.are.equal(chain:length(), 1)
  end)
end)

describe("Chain:end_location", function()
  it("returns the position at the end of the chain", function()
    local v0 = Vec3.new(3, 4, 12)
    local v1 = Vec3.new(3, -4, -12)
    local l0 = Link.new(v0:length())
    local l1 = Link.new(v1:length())
    local j0 = Joint.ball(v0)
    local j1 = Joint.ball(v1)
    local chain = Chain.new():add(j0, l0):add(j1, l1)

    local p = chain:end_location()
    assert.are.equal(p:x(), 6)
    assert.are.equal(p:y(), 0)
    assert.are.equal(p:z(), 0)
  end)
end)

describe("Chain:forwards", function()
  it("iterates forwards through the chain", function()
    local v0 = Vec3.new(3, 4, 12)
    local v1 = Vec3.new(3, -4, -12)
    local l0 = Link.new(v0:length())
    local l1 = Link.new(v1:length())
    local j0 = Joint.ball(v0)
    local j1 = Joint.ball(v1)
    local chain = Chain.new():add(j0, l0):add(j1, l1)

    local iter = chain:forwards()
    local next = iter()
    assert.are.equal(next.joint, j0)
    assert.are.equal(next.link, l0)
    local next = iter()
    assert.are.equal(next.joint, j1)
    assert.are.equal(next.link, l1)
    assert.is_nil(iter())
  end)
end)

describe("Chain:backwards", function()
  it("iterates backwards through the chain", function()
    local v0 = Vec3.new(3, 4, 12)
    local v1 = Vec3.new(3, -4, -12)
    local l0 = Link.new(v0:length())
    local l1 = Link.new(v1:length())
    local j0 = Joint.ball(v0)
    local j1 = Joint.ball(v1)
    local chain = Chain.new():add(j0, l0):add(j1, l1)

    local iter = chain:backwards()
    local next = iter()
    assert.are.equal(next.joint, j1)
    assert.are.equal(next.link, l1)
    local next = iter()
    assert.are.equal(next.joint, j0)
    assert.are.equal(next.link, l0)
    assert.is_nil(iter())
  end)
end)
